package com.daniely.unara;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.Time;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /task (after Application path)
public class SQLController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;

    private final TaskRepository taskRepository;


    public SQLController(UserRepository userRepository, TaskRepository taskRepository) {
        this.userRepository = userRepository;
        this.taskRepository = taskRepository;
    }
    @PostMapping(path="/add-user") // Map ONLY POST Requests
    public @ResponseBody Integer addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setUsername(name);
        n.setEmail(email);
        List<Task> tasks = List.of();
        n.setTasks(tasks);
        userRepository.save(n);
        System.out.println("add handled");
        return n.getId();
    }
    @GetMapping(path="/get")
    public @ResponseBody List<Task> getUsersTasks(@RequestParam Integer userId) {
        // This returns a JSON or XML with a users tasks
        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));
        return user.getTasks();
    }


    @PatchMapping(path="/edit/{taskId}")
    public @ResponseBody String editTask(@PathVariable Integer taskId,  @RequestParam String whatToEdit, @RequestParam String newChange) {
        // Logic to edit a task's title
        // This is just a placeholder for demonstration
        Task task;
        try{
            task = taskRepository.findById(taskId).orElseThrow();
            if (whatToEdit.equals("title")) {
                task.setTitle(newChange);
            }
            if (whatToEdit.equals("description")) {
                task.setDescription(newChange);
            }
            if (whatToEdit.equals("done")) {
                task.setCompleted(!task.isCompleted());
                if (task.isCompleted()) {
                    task.setCompletedTime(new Time(System.currentTimeMillis()));
                }
            }
            taskRepository.save(task);
        } catch (Exception e) {
            throw new RuntimeException("Task not found");
        }
        System.out.println("edit-task handled");
        return "task edited.";
    }

    @PostMapping(path="/add")
    public @ResponseBody ResponseEntity<Map<String, Object>> addTask(@RequestParam Integer userId, @RequestParam String title, @RequestParam String description) {
        // Logic to add a task to a user
        // This is just a placeholder for demonstration
        Map<String, Object> response = new HashMap<>();

        User user;
        try{
//            User user = userRepository.findByUserIdNative(userId);
            user = userRepository.findById(userId).orElseThrow();
//            user.addTask(title, description);
        } catch (Exception e) {
            throw new RuntimeException("User not found.");
        }
        Task task = new Task();
        task.setTitle(title);
        task.setDescription(description);
        task.setUser(user);
        user.addTask(task);
        taskRepository.save(task);
        System.out.println("addTask handled");
        response.put("id", task.getId());
        return ResponseEntity.ok(response);
    }

    @DeleteMapping(path="/delete/{taskId}")
    public @ResponseBody String deleteTask(@PathVariable Integer taskId) {
        taskRepository.deleteById(taskId);
        System.out.println("delete-task handled");
        return "task deleted.";
    }
}